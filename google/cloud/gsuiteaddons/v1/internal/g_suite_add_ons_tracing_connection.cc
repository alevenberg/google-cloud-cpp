// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gsuiteaddons/v1/gsuiteaddons.proto

#include "google/cloud/gsuiteaddons/v1/internal/g_suite_add_ons_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace gsuiteaddons_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GSuiteAddOnsTracingConnection::GSuiteAddOnsTracingConnection(
    std::shared_ptr<gsuiteaddons_v1::GSuiteAddOnsConnection> child)
    : child_(std::move(child)) {}

StatusOr<google::cloud::gsuiteaddons::v1::Authorization>
GSuiteAddOnsTracingConnection::GetAuthorization(
    google::cloud::gsuiteaddons::v1::GetAuthorizationRequest const& request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::GetAuthorization");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetAuthorization(request));
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsTracingConnection::CreateDeployment(
    google::cloud::gsuiteaddons::v1::CreateDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::CreateDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateDeployment(request));
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsTracingConnection::ReplaceDeployment(
    google::cloud::gsuiteaddons::v1::ReplaceDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::ReplaceDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ReplaceDeployment(request));
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsTracingConnection::GetDeployment(
    google::cloud::gsuiteaddons::v1::GetDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::GetDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetDeployment(request));
}

StreamRange<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsTracingConnection::ListDeployments(
    google::cloud::gsuiteaddons::v1::ListDeploymentsRequest request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::ListDeployments");
  auto scope = opentelemetry::trace::Scope(span);
  auto sr = child_->ListDeployments(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::gsuiteaddons::v1::Deployment>(std::move(span),
                                                   std::move(sr));
}

Status GSuiteAddOnsTracingConnection::DeleteDeployment(
    google::cloud::gsuiteaddons::v1::DeleteDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::DeleteDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteDeployment(request));
}

Status GSuiteAddOnsTracingConnection::InstallDeployment(
    google::cloud::gsuiteaddons::v1::InstallDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::InstallDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->InstallDeployment(request));
}

Status GSuiteAddOnsTracingConnection::UninstallDeployment(
    google::cloud::gsuiteaddons::v1::UninstallDeploymentRequest const&
        request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::UninstallDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UninstallDeployment(request));
}

StatusOr<google::cloud::gsuiteaddons::v1::InstallStatus>
GSuiteAddOnsTracingConnection::GetInstallStatus(
    google::cloud::gsuiteaddons::v1::GetInstallStatusRequest const& request) {
  auto span = internal::MakeSpan(
      "gsuiteaddons_v1::GSuiteAddOnsConnection::GetInstallStatus");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetInstallStatus(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<gsuiteaddons_v1::GSuiteAddOnsConnection>
MakeGSuiteAddOnsTracingConnection(
    std::shared_ptr<gsuiteaddons_v1::GSuiteAddOnsConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<GSuiteAddOnsTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gsuiteaddons_v1_internal
}  // namespace cloud
}  // namespace google
