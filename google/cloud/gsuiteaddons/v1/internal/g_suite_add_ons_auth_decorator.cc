// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gsuiteaddons/v1/gsuiteaddons.proto

#include "google/cloud/gsuiteaddons/v1/internal/g_suite_add_ons_auth_decorator.h"
#include <google/cloud/gsuiteaddons/v1/gsuiteaddons.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace gsuiteaddons_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

GSuiteAddOnsAuth::GSuiteAddOnsAuth(
    std::shared_ptr<google::cloud::internal::GrpcAuthenticationStrategy> auth,
    std::shared_ptr<GSuiteAddOnsStub> child)
    : auth_(std::move(auth)), child_(std::move(child)) {}

StatusOr<google::cloud::gsuiteaddons::v1::Authorization>
GSuiteAddOnsAuth::GetAuthorization(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::GetAuthorizationRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetAuthorization(context, request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsAuth::CreateDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::CreateDeploymentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->CreateDeployment(context, request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsAuth::ReplaceDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::ReplaceDeploymentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ReplaceDeployment(context, request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsAuth::GetDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::GetDeploymentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetDeployment(context, request);
}

StatusOr<google::cloud::gsuiteaddons::v1::ListDeploymentsResponse>
GSuiteAddOnsAuth::ListDeployments(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::ListDeploymentsRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->ListDeployments(context, request);
}

Status GSuiteAddOnsAuth::DeleteDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::DeleteDeploymentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->DeleteDeployment(context, request);
}

Status GSuiteAddOnsAuth::InstallDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::InstallDeploymentRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->InstallDeployment(context, request);
}

Status GSuiteAddOnsAuth::UninstallDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::UninstallDeploymentRequest const&
        request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->UninstallDeployment(context, request);
}

StatusOr<google::cloud::gsuiteaddons::v1::InstallStatus>
GSuiteAddOnsAuth::GetInstallStatus(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::GetInstallStatusRequest const& request) {
  auto status = auth_->ConfigureContext(context);
  if (!status.ok()) return status;
  return child_->GetInstallStatus(context, request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gsuiteaddons_v1_internal
}  // namespace cloud
}  // namespace google
