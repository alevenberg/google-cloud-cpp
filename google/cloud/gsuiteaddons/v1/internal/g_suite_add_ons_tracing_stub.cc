// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gsuiteaddons/v1/gsuiteaddons.proto

#include "google/cloud/gsuiteaddons/v1/internal/g_suite_add_ons_tracing_stub.h"
#include "google/cloud/internal/grpc_opentelemetry.h"

namespace google {
namespace cloud {
namespace gsuiteaddons_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

GSuiteAddOnsTracingStub::GSuiteAddOnsTracingStub(
    std::shared_ptr<GSuiteAddOnsStub> child)
    : child_(std::move(child)), propagator_(internal::MakePropagator()) {}

StatusOr<google::cloud::gsuiteaddons::v1::Authorization>
GSuiteAddOnsTracingStub::GetAuthorization(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::GetAuthorizationRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "GetAuthorization");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetAuthorization(context, request));
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsTracingStub::CreateDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::CreateDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "CreateDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->CreateDeployment(context, request));
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsTracingStub::ReplaceDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::ReplaceDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "ReplaceDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ReplaceDeployment(context, request));
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsTracingStub::GetDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::GetDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "GetDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetDeployment(context, request));
}

StatusOr<google::cloud::gsuiteaddons::v1::ListDeploymentsResponse>
GSuiteAddOnsTracingStub::ListDeployments(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::ListDeploymentsRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "ListDeployments");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->ListDeployments(context, request));
}

Status GSuiteAddOnsTracingStub::DeleteDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::DeleteDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "DeleteDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->DeleteDeployment(context, request));
}

Status GSuiteAddOnsTracingStub::InstallDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::InstallDeploymentRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "InstallDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->InstallDeployment(context, request));
}

Status GSuiteAddOnsTracingStub::UninstallDeployment(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::UninstallDeploymentRequest const&
        request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "UninstallDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->UninstallDeployment(context, request));
}

StatusOr<google::cloud::gsuiteaddons::v1::InstallStatus>
GSuiteAddOnsTracingStub::GetInstallStatus(
    grpc::ClientContext& context,
    google::cloud::gsuiteaddons::v1::GetInstallStatusRequest const& request) {
  auto span = internal::MakeSpanGrpc(
      "google.cloud.gsuiteaddons.v1.GSuiteAddOns", "GetInstallStatus");
  auto scope = opentelemetry::trace::Scope(span);
  internal::InjectTraceContext(context, *propagator_);
  return internal::EndSpan(context, *span,
                           child_->GetInstallStatus(context, request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<GSuiteAddOnsStub> MakeGSuiteAddOnsTracingStub(
    std::shared_ptr<GSuiteAddOnsStub> stub) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return std::make_shared<GSuiteAddOnsTracingStub>(std::move(stub));
#else
  return stub;
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gsuiteaddons_v1_internal
}  // namespace cloud
}  // namespace google
