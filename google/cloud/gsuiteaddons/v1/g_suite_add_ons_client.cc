// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gsuiteaddons/v1/gsuiteaddons.proto

#include "google/cloud/gsuiteaddons/v1/g_suite_add_ons_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace gsuiteaddons_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

GSuiteAddOnsClient::GSuiteAddOnsClient(
    std::shared_ptr<GSuiteAddOnsConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
GSuiteAddOnsClient::~GSuiteAddOnsClient() = default;

StatusOr<google::cloud::gsuiteaddons::v1::Authorization>
GSuiteAddOnsClient::GetAuthorization(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::GetAuthorizationRequest request;
  request.set_name(name);
  return connection_->GetAuthorization(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Authorization>
GSuiteAddOnsClient::GetAuthorization(
    google::cloud::gsuiteaddons::v1::GetAuthorizationRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetAuthorization(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsClient::CreateDeployment(
    std::string const& parent,
    google::cloud::gsuiteaddons::v1::Deployment const& deployment,
    std::string const& deployment_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::CreateDeploymentRequest request;
  request.set_parent(parent);
  *request.mutable_deployment() = deployment;
  request.set_deployment_id(deployment_id);
  return connection_->CreateDeployment(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsClient::CreateDeployment(
    google::cloud::gsuiteaddons::v1::CreateDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateDeployment(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsClient::ReplaceDeployment(
    google::cloud::gsuiteaddons::v1::Deployment const& deployment,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::ReplaceDeploymentRequest request;
  *request.mutable_deployment() = deployment;
  return connection_->ReplaceDeployment(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsClient::ReplaceDeployment(
    google::cloud::gsuiteaddons::v1::ReplaceDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ReplaceDeployment(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsClient::GetDeployment(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::GetDeploymentRequest request;
  request.set_name(name);
  return connection_->GetDeployment(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsClient::GetDeployment(
    google::cloud::gsuiteaddons::v1::GetDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetDeployment(request);
}

StreamRange<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsClient::ListDeployments(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::ListDeploymentsRequest request;
  request.set_parent(parent);
  return connection_->ListDeployments(request);
}

StreamRange<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsClient::ListDeployments(
    google::cloud::gsuiteaddons::v1::ListDeploymentsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListDeployments(std::move(request));
}

Status GSuiteAddOnsClient::DeleteDeployment(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::DeleteDeploymentRequest request;
  request.set_name(name);
  return connection_->DeleteDeployment(request);
}

Status GSuiteAddOnsClient::DeleteDeployment(
    google::cloud::gsuiteaddons::v1::DeleteDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteDeployment(request);
}

Status GSuiteAddOnsClient::InstallDeployment(std::string const& name,
                                             Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::InstallDeploymentRequest request;
  request.set_name(name);
  return connection_->InstallDeployment(request);
}

Status GSuiteAddOnsClient::InstallDeployment(
    google::cloud::gsuiteaddons::v1::InstallDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InstallDeployment(request);
}

Status GSuiteAddOnsClient::UninstallDeployment(std::string const& name,
                                               Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::UninstallDeploymentRequest request;
  request.set_name(name);
  return connection_->UninstallDeployment(request);
}

Status GSuiteAddOnsClient::UninstallDeployment(
    google::cloud::gsuiteaddons::v1::UninstallDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UninstallDeployment(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::InstallStatus>
GSuiteAddOnsClient::GetInstallStatus(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::gsuiteaddons::v1::GetInstallStatusRequest request;
  request.set_name(name);
  return connection_->GetInstallStatus(request);
}

StatusOr<google::cloud::gsuiteaddons::v1::InstallStatus>
GSuiteAddOnsClient::GetInstallStatus(
    google::cloud::gsuiteaddons::v1::GetInstallStatusRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetInstallStatus(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gsuiteaddons_v1
}  // namespace cloud
}  // namespace google
