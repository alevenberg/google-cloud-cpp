// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gsuiteaddons/v1/gsuiteaddons.proto

#include "google/cloud/gsuiteaddons/v1/g_suite_add_ons_connection.h"
#include "google/cloud/gsuiteaddons/v1/g_suite_add_ons_options.h"
#include "google/cloud/gsuiteaddons/v1/internal/g_suite_add_ons_connection_impl.h"
#include "google/cloud/gsuiteaddons/v1/internal/g_suite_add_ons_option_defaults.h"
#include "google/cloud/gsuiteaddons/v1/internal/g_suite_add_ons_stub_factory.h"
#include "google/cloud/gsuiteaddons/v1/internal/g_suite_add_ons_tracing_connection.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace gsuiteaddons_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

GSuiteAddOnsConnection::~GSuiteAddOnsConnection() = default;

StatusOr<google::cloud::gsuiteaddons::v1::Authorization>
GSuiteAddOnsConnection::GetAuthorization(
    google::cloud::gsuiteaddons::v1::GetAuthorizationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsConnection::CreateDeployment(
    google::cloud::gsuiteaddons::v1::CreateDeploymentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsConnection::ReplaceDeployment(
    google::cloud::gsuiteaddons::v1::ReplaceDeploymentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsConnection::GetDeployment(
    google::cloud::gsuiteaddons::v1::GetDeploymentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::gsuiteaddons::v1::Deployment>
GSuiteAddOnsConnection::ListDeployments(
    google::cloud::gsuiteaddons::v1::
        ListDeploymentsRequest) {  // NOLINT(performance-unnecessary-value-param)
  return google::cloud::internal::MakeUnimplementedPaginationRange<
      StreamRange<google::cloud::gsuiteaddons::v1::Deployment>>();
}

Status GSuiteAddOnsConnection::DeleteDeployment(
    google::cloud::gsuiteaddons::v1::DeleteDeploymentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status GSuiteAddOnsConnection::InstallDeployment(
    google::cloud::gsuiteaddons::v1::InstallDeploymentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status GSuiteAddOnsConnection::UninstallDeployment(
    google::cloud::gsuiteaddons::v1::UninstallDeploymentRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::gsuiteaddons::v1::InstallStatus>
GSuiteAddOnsConnection::GetInstallStatus(
    google::cloud::gsuiteaddons::v1::GetInstallStatusRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<GSuiteAddOnsConnection> MakeGSuiteAddOnsConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 GSuiteAddOnsPolicyOptionList>(options,
                                                               __func__);
  options =
      gsuiteaddons_v1_internal::GSuiteAddOnsDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = gsuiteaddons_v1_internal::CreateDefaultGSuiteAddOnsStub(
      background->cq(), options);
  return gsuiteaddons_v1_internal::MakeGSuiteAddOnsTracingConnection(
      std::make_shared<gsuiteaddons_v1_internal::GSuiteAddOnsConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gsuiteaddons_v1
}  // namespace cloud
}  // namespace google
